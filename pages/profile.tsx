import React, {useState, useEffect} from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { makeStyles } from '@material-ui/core/styles';
import Moralis, { useMoralis } from "react-moralis";
import Logo from "../assets/Logos/LOGO_gofundyourself.png"

import {
  BodyCon
} from "../components/HomePage/HomePageElements"

import {
    ColumnCon, 

    ColumnLeft, ProgressStepper,
    
    ColumnRight, ProfileEditsCon, ProfileEditsTitle, SaveProfileInformationCon, SaveProfileInformation
} from "../components/Profile/ProfileElements"

import Box from '@mui/material/Box';
import Stepper from '@mui/material/Stepper';
import Step from '@mui/material/Step';
import StepLabel from '@mui/material/StepLabel';
import StepContent from '@mui/material/StepContent';
import Button from '@mui/material/Button';
import Paper from '@mui/material/Paper';
import Typography from '@mui/material/Typography';
import Avatar from '@material-ui/core/Avatar';
import IconButton from '@material-ui/core/IconButton';
import AddReactionIcon from '@mui/icons-material/AddReaction';

const useStyles = makeStyles((theme) => ({
    root: {
        alignSelf: 'center',
        justifyContent: "center",
        alignItems: "center",
        display: 'grid',
        '& > *': {
            margin: theme.spacing(1),
        },
    },
    input: {
        //   display: "none",
        position: 'relative',
        top: 230,
        
        // marginTop: "50px"
        
    },
    large: {
        width: theme.spacing(20),
        height: theme.spacing(20),
        color: "#00FCB9",
        //   marginTop: "20px"
        // left: "50%",
        // transform: "translateX(-30%)",
        position: "relative",
    },
  }));

const steps = [
    {
        label: 'Add a Profile Picture',
        description: `Mint your profile picture to the blockchain with IPFS using NFT.Storage`,
    },
    {
        label: 'Lets Get Your Profile Set Up',
        description: 'Sync your profile data elements to your ETH wallet using Moralis',
    },
    {
        label: 'Tell Us About Yourself',
        description: `We know you LOVE web3 and blockchain, but like, who are you, really? Tell us everything (but not in a weird way)`,
    },
    {
        label: 'Confirm Your Profile',
        description: `Everything look good?`,
    },
  ];

function Profile () {
    const { 
        authenticate, 
        isAuthenticated, 
        user,
    } = useMoralis();

    const classes = useStyles();

    const [activeStep, setActiveStep] = useState(0);
    const userAddress = user?.get("ethAddress");
    const userPFP = user?.get("profilePicture");

    const [name, setName] = useState("");
    const [isLoading, setIsLoading] = React.useState(false);
    const [file, setFile] = useState('')
    const inputFileRef = React.useRef<HTMLInputElement | null>(null);
  
    //   PROGRESS STEPPER
    const handleNext = () => {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
    };

    const handleBack = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };

    const handleReset = () => {
        setActiveStep(0);
    };


    const handleOnClick = async (e: React.MouseEvent<HTMLInputElement>) => {

        /* Prevent form from submitting by default */
        e.preventDefault();

        /* If file is not selected, then show alert message */
        if (!inputFileRef.current?.files?.length) {
            alert('Please, select file you want to upload');
            return;
        }

        setIsLoading(true);

        /* Add files to FormData */
        const formData = new FormData();
        Object.values(inputFileRef.current.files).forEach(file => {
            formData.append('file', file);
        })

        /* Send request to our api route */
        const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData
        });

        const body = await response.json() as { status: 'ok' | 'fail', message: string };

        alert(body.message);

        if (body.status === 'ok') {
            inputFileRef.current.value = '';
            // Do some stuff on successfully upload
        } else {
            // Do some stuff on error
        }

        setIsLoading(false);
    };


    


  if(!isAuthenticated)
  return (
    <>
    <div>
        hello
    </div>
    </>
  )
  if(isAuthenticated)
  return (
    <>
      <div className={styles.container}>
        <Head>
          <title>GoFundYourself</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      </div>
      <BodyCon>
      <h1>Hey you are logged in authenticated!</h1>
    <ColumnCon>

      <ColumnLeft>
        <ProgressStepper>
            <Box sx={{ maxWidth: 400 }}>
            <Stepper activeStep={activeStep} orientation="vertical">
                {steps.map((step, index) => (
                <Step key={step.label}>
                    <StepLabel
                    optional={
                        index === 3 ? (
                        <Typography variant="caption">Last step</Typography>
                        ) : null
                    }
                    >
                    {step.label}
                    </StepLabel>
                    <StepContent>
                    <Typography>{step.description}</Typography>
                    <Box sx={{ mb: 2 }}>
                        <div>
                        <Button
                            variant="contained"
                            onClick={handleNext}
                            sx={{ mt: 1, mr: 1 }}
                        >
                            {index === steps.length - 1 ? 'Finish' : 'Continue'}
                        </Button>
                        <Button
                            disabled={index === 0}
                            onClick={handleBack}
                            sx={{ mt: 1, mr: 1 }}
                        >
                            Back
                        </Button>
                        </div>
                    </Box>
                    </StepContent>
                </Step>
                ))}
            </Stepper>
            {activeStep === steps.length && (
                <Paper square elevation={0} sx={{ p: 3 }}>
                <Typography>All steps completed - you&apos;re finished</Typography>
                <Button onClick={handleReset} sx={{ mt: 1, mr: 1 }}>
                    Reset
                </Button>
                </Paper>
            )}
            </Box>
        </ProgressStepper>
    </ColumnLeft>

    <ColumnRight>
        <ProfileEditsCon>

        {/* Add Profile Step */}
        {activeStep === 0 
        && (userPFP == null || undefined  ?
            <>
            <ProfileEditsTitle>
                First step, pick a profile picture!
            </ProfileEditsTitle>
            <div className={classes.root}>

            <input 
                accept="image/*" 
                className={classes.input} 
                id="icon-button-file" 
                type="file"
                name="myfile" 
                ref={inputFileRef}
            />
                <label htmlFor="icon-button-file">
                    <IconButton color="primary" aria-label="upload picture" component="span">

                    {inputFileRef.current?.files?.length === undefined || null ? 
                    // @ts-ignore
                    <Image src={Logo} alt="to mint" width="160" height="160"/>
                    : 
                    <Avatar className={classes.large}/>
                    }
                    </IconButton>
                </label>
            </div>
            <SaveProfileInformationCon>
                <SaveProfileInformation 
                    style={{justifyContent: "center"}}
                    type="submit"
                    value={isLoading? "Minting..." : "Upload to IPFS" }
                    disabled={isLoading} 
                    onClick={handleOnClick}
                />
            </SaveProfileInformationCon>
            </>
            : 
            ""
            )
        || (userPFP > 0 ? 
            <ProfileEditsTitle>You already have a profile picture:</ProfileEditsTitle>
            :
            ""
            )
        }
        </ProfileEditsCon>

    </ColumnRight>

    </ColumnCon>

      </BodyCon>
    </>
  )
}

export default Profile
